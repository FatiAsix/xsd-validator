#!/usr/bin/env ruby

require 'nokogiri'
require 'set'

namespaces = {
  'xsl' => 'http://www.w3.org/1999/XSL/Transform',
  'svrl' => 'http://purl.oclc.org/dsdl/svrl'
}

en_code_files = Hash.new { |h, k| h[k] = Set.new }
en_text_codes = Hash.new
de_code_files = Hash.new { |h, k| h[k] = Set.new }
de_text_codes = Hash.new

def is_de_code?(code, filename)
  return false unless code.start_with?('BR-DE-', 'BR-DEX-')
  special_filenames = %w[XRechnung-UBL-validation-CreditNote_2_1 XRechnung-UBL-validation-CreditNote_2_2 XRechnung-UBL-validation-Invoice_2_1 XRechnung-UBL-validation-Invoice_2_2 XRechnung-UBL-validation_2_3 XRechnung-UBL-validation_3_0]
  excluded = ['BR-DE-22', *('04'..'09').map { |n| "BR-DEX-#{n}" }]
  return true if code == 'BR-DE-22' && special_filenames.include?(filename)
  !excluded.include?(code)
end

Dir.glob('lib/sch/compiled/*.sch.xslt').each do |file_path|
  doc = Nokogiri::XML(File.read(file_path))

  templates = doc.xpath('//xsl:stylesheet//xsl:template//xsl:choose//xsl:otherwise//svrl:failed-assert', namespaces)

  templates.each do |template|
    id_node = template.at_xpath('./xsl:attribute[@name="id"]', namespaces)
    text_node = template.at_xpath('./svrl:text', namespaces)

    id = id_node&.text || 'sin-id'
    text = text_node&.text || 'sin-texto'

    id.gsub!('.', "_")

    text.gsub!('Â ', "")
    text.gsub!('"', "'")
    text.gsub!(/^'?\s*>?\s*\[[A-Za-z0-9.\-]+\]\s*-?/, '')
    text.gsub!(/\s+/, ' ')
    text.strip!

    if text.include?(':') or text.start_with?("'") or text.start_with?("@")
      text = "\"#{text}\""
    end

    filename = File.basename(file_path).sub(/\.sch\.xslt$/, '')
    filename.gsub!('.', "_")

    if is_de_code?(id, filename)
      code_files = de_code_files
      text_codes = de_text_codes
    else
      code_files = en_code_files
      text_codes = en_text_codes
    end

    if code_files['default'].include?(id) && text_codes["#{id}"] != text
      code_files[filename] << id
      text_codes["#{filename}_#{id}"] = text
    else
      code_files['default'] << id
      text_codes[id] = text
    end
  end
end

[[en_code_files, en_text_codes, 'en'], [de_code_files, de_text_codes, 'de']].each do |code_files, text_codes, prefix|
  File.open("bin/#{prefix}.yml", 'w') do |file_out|
    file_out.puts "---"
    file_out.puts "#{prefix}:"
    code_files.each do |file, codes|
      file_default = (file == 'default')
      tabs_code = file_default ? "\t" : "\t\t"
      file_out.puts "\t#{file}:" unless file_default
      codes.each do |code|
        text_key = file_default ? code : "#{file}_#{code}"
        file_out.puts "#{tabs_code}#{code}: #{text_codes[text_key]}"
      end
    end
  end
end

File.open("bin/en.yml", 'a') do |file_out|
  file_out.puts "\tB2B-DOC-1: 'Unknown customizationID'"
end